@model ToDoList.Core.ViewModels.TasksViewModel

<h1 class="mb-3">My Tasks</h1>

@*formulasz filtrowania*@

<form id="filterForm" class="row gy-2 gx-3 align-items-center">
    <div class="col-auto">
        @Html.TextBoxFor(x => x.FilterTasks.Title, new { @class = "form-control mb-2", placeholder = "Tytuł" })
    </div>
    <div class="col-auto">
        @Html.DropDownListFor(x => x.FilterTasks.CategoryId, new SelectList(Model.Categories, "Id", "Name"), "--wybierz kategorię---",
                 new { @class = "form-control mb-2" })
    </div>
    <div class="col-auto">
        <label class="visually-hidden" for="autoSizingSelect">Preference</label>
        <select class="form-select" id="autoSizingSelect">
            <option selected>Choose...</option>
            <option value="1">One</option>
            <option value="2">Two</option>
            <option value="3">Three</option>
        </select>
    </div>
    <div class="col-auto">
        @Html.CheckBoxFor(x => x.FilterTasks.IsExecuted, new { @class = "form-check-label" })

        @Html.LabelFor(x => x.FilterTasks.IsExecuted)
        <div class="form-check">
            <input class="form-check-input" type="checkbox" id="autoSizingCheck">
            <label class="form-check-label" for="autoSizingCheck">
                Remember me
            </label>
        </div>
    </div>
    <div class="col-auto">
        <button type="submit" class="btn btn-primary">Search</button>
    </div>
</form>

<div>
    @await Html.PartialAsync("_TasksTable.cshtml", Model.Tasks)
</div>

@section Scripts
{
    <script type="text/javascript">
        $(document).ready(function () {

            $('#filterForm').submit(function () {

                $ajax({
                    type: "POST",
                    url: "@Url.Action("Tasks", "Task")",
                    data: $(this).serialize(),
                    succes: function (data) {
                        $('#tasksTable').html(data); {
                            alert(data.message)
                        },
                    },
                    dataType: "html"
                });

                return false;

            });

        });

        function deleteTask(id, btn) {
            if (confirm("Czy napewno chcesz usunąć zadanie"))
                return;


            $ajax({
                type: "POST",
                url: "@Url.Action("Delete", "Task")",
                data: {
                    id: id
                },
                succes: function (data) {
                    if (data.succes) {
                        var row = btn.parentNode.parentNode;
                        row.parentNode.removeChilde(row);

                    }
                    else {
                        alert(data.message);
                    },
                    error: function (data) {
                        alert(data.message)
                    },

                },
                dataType: "json"
            });
        }

        function finishTask(id, btn) {
            if (confirm("Czy napewno chcesz oznaczyć zadanie jako zrealizowane"))
                return;


            $ajax({
                type: "POST",
                url: "@Url.Action("Finish", "Task")",
                data: {
                    id: id
                },
                succes: function (data) {
                    if (data.succes) {
                        var row = btn.parentNode.parentNode;
                        row.parentNode.removeChilde(row);

                    }
                    else {
                        alert(data.message);
                    },
                    error: function (data) {
                        alert(data.message)
                    },

                },
                dataType: "json"
            });
        }

    </script>
}
@*Tabela z zadaniami*@